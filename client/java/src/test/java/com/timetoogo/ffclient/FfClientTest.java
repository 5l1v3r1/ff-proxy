/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.timetoogo.ffclient;

import org.junit.Test;
import static org.junit.Assert.*;

import java.net.InetAddress;
import java.net.URI;
import java.net.http.HttpRequest;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;

public class FfClientTest {
    @Test
    public void testSerializeGetRequest() throws Exception {
        var client = new FfClient(FfConfig.builder().ipAddress(InetAddress.getLocalHost()).port(8080).build());

        var request = HttpRequest.newBuilder().GET().uri(URI.create("https://google.com")).build();

        var bytes = client.serializeHttpRequest(request);
        var requestString = Charset.forName("UTF-8").decode(ByteBuffer.wrap(bytes)).toString();

        var expectedString = "GET / HTTP/1.1\nHost: google.com\n\n";

        assertEquals(expectedString, requestString);
    }

    @Test
    public void testSerializeGetRequestWithHeaders() throws Exception {
        var client = new FfClient(FfConfig.builder().ipAddress(InetAddress.getLocalHost()).port(8080).build());

        var request = HttpRequest.newBuilder().GET().header("Test", "value").uri(URI.create("https://google.com"))
                .build();

        var bytes = client.serializeHttpRequest(request);
        var requestString = Charset.forName("UTF-8").decode(ByteBuffer.wrap(bytes)).toString();

        var expectedString = "GET / HTTP/1.1\nHost: google.com\nTest: value\n\n";

        assertEquals(expectedString, requestString);
    }

    @Test
    public void testSerializePost() throws Exception {
        var client = new FfClient(FfConfig.builder().ipAddress(InetAddress.getLocalHost()).port(8080).build());

        var request = HttpRequest.newBuilder().POST(HttpRequest.BodyPublishers.ofString("Test Request Body"))
                .uri(URI.create("https://google.com")).build();

        var bytes = client.serializeHttpRequest(request);
        var requestString = Charset.forName("UTF-8").decode(ByteBuffer.wrap(bytes)).toString();

        var expectedString = "POST / HTTP/1.1\nHost: google.com\nContent-Length: 17\n\nTest Request Body";

        assertEquals(expectedString, requestString);
    }

    @Test
    public void testEncryptedMessage() throws Exception {
        var client = new FfClient(
                FfConfig.builder().ipAddress(InetAddress.getLocalHost()).port(8080).preSharedKey("testkey").build());

        byte[] plaintext = "test plaintext".getBytes(Charset.forName("UTF-8"));

        var request = new FfRequest();

        byte[] ciphertext = client.encryptHttpMessage(plaintext, request);

        assertNotEquals(ciphertext, plaintext);
        assertEquals(ciphertext.length, plaintext.length);

        var mode = request.getOptions().stream().filter(i -> i.getType() == FfRequestOption.Type.ENCRYPTION_MODE)
                .findFirst().get().getValue();

        assertEquals(FfRequest.EncryptionMode.AES_256_GCM.getValue(), mode[0]);

        var iv = request.getOptions().stream().filter(i -> i.getType() == FfRequestOption.Type.ENCRYPTION_IV)
                .findFirst().get().getValue();

        assertEquals(12, iv.length);

        var tag = request.getOptions().stream().filter(i -> i.getType() == FfRequestOption.Type.ENCRYPTION_TAG)
                .findFirst().get().getValue();

        assertEquals(16, tag.length);
    }
}
